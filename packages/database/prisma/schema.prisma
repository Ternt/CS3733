// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum NodeType {
  CONF
  DEPT
  HALL
  LABS
  REST
  SERV
  ELEV
  EXIT
  STAI
  RETL
  INFO
  BATH
}

model Employee {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String

  assignedRequests ServiceRequest[]
}

model NodeDB {
  nodeID    String   @unique
  xcoord    Int
  ycoord    Int
  floor     String
  building  String
  longName  String
  shortName String
  nodeType  NodeType

  startEdges EdgeDB[]         @relation(name: "start")
  endEdges   EdgeDB[]         @relation(name: "end")
  requests   ServiceRequest[]
}

model EdgeDB {
  startNodeID String
  endNodeID   String
  blocked     Boolean @default(false)
  heat        Int     @default(0)

  startNode NodeDB @relation(name: "start", fields: [startNodeID], references: [nodeID], onDelete: Cascade)
  endNode   NodeDB @relation(name: "end", fields: [endNodeID], references: [nodeID], onDelete: Cascade)

  @@id(name: "edgeID", [startNodeID, endNodeID])
  @@unique([startNodeID, endNodeID])
  @@unique([endNodeID, startNodeID])
}

enum CartItemType {
  FLOWER
  GIFT
}

model CartItem {
  id          Int          @id @default(autoincrement())
  type        CartItemType
  imageURL    String
  name        String
  description String
  price       Decimal      @db.Decimal(10, 2)

  giftRequests CartItemsInGiftRequests[]
}

enum ServiceRequestType {
  MAINTENANCE
  FLOWERS
  GIFT
  SANITATION
  MEDICINE
  LANGUAGE
}

enum ServiceRequestPriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum ServiceRequestStatus {
  UNASSIGNED
  ASSIGNED
  IN_PROGRESS
  CLOSED
}

model ServiceRequest {
  requestID  Int                    @id @default(autoincrement())
  type       ServiceRequestType
  notes      String?
  location   NodeDB                 @relation(fields: [locationID], references: [nodeID], onDelete: Cascade)
  locationID String
  priority   ServiceRequestPriority
  status     ServiceRequestStatus

  assignedEmployeeID Int?
  assignedEmployee   Employee? @relation(fields: [assignedEmployeeID], references: [id], onDelete: SetNull)

  sanitationDetail  SanitationRequest?
  medicineDetail    MedicineRequest?
  giftDetail        GiftRequest?
  maintenanceDetail MaintenanceRequest?
  languageDetail    LanguageRequest?
}

enum MaintenanceType {
  PLUMBING
  ELEVATOR
}

model MaintenanceRequest {
  request         ServiceRequest  @relation(fields: [requestID], references: [requestID], onDelete: Cascade)
  requestID       Int             @unique
  maintenanceType MaintenanceType
  workersNeeded   Int
}

enum MessType {
  SOLID_WASTE
  LIQUID_SPILL
  OTHER
}

enum MessSize {
  SMALL
  MEDIUM
  LARGE
}

model SanitationRequestMessTypes {
  request   SanitationRequest @relation(fields: [requestID], references: [requestID], onDelete: Cascade)
  requestID Int
  messType  MessType

  @@unique([requestID, messType])
}

model SanitationRequest {
  request   ServiceRequest @relation(fields: [requestID], references: [requestID], onDelete: Cascade)
  requestID Int            @unique

  employeeName String
  messTypes    SanitationRequestMessTypes[]
  messSize     MessSize
  date         String
}

enum Medicine {
  PAIN_KILLERS
  TYLENOL
  PARACETAMOL
}

enum MedicineForm {
  POWDER
  TAB_OR_CAP
  CHEWABLE
  LIQUID
  INHALER
}

model MedicineRequest {
  request   ServiceRequest @relation(fields: [requestID], references: [requestID], onDelete: Cascade)
  requestID Int            @unique

  patientName          String
  primaryPhysicianName String
  medicine             Medicine
  dosage               Int
  form                 MedicineForm
  date                 String
}

enum ShippingType {
  EXPRESS
  STANDARD
}

model CartItemsInGiftRequests {
  id Int @id @default(autoincrement())

  giftRequest   GiftRequest @relation(fields: [giftRequestID], references: [requestID], onDelete: Cascade)
  giftRequestID Int

  cartItem   CartItem @relation(fields: [cartItemID], references: [id], onDelete: Cascade)
  cartItemID Int
}

model GiftRequest {
  request   ServiceRequest @relation(fields: [requestID], references: [requestID], onDelete: Cascade)
  requestID Int            @unique

  senderName    String
  recipientName String
  shippingType  ShippingType

  cardNumber         BigInt
  cardCVV            Int
  cardHolderName     String
  cardExpirationDate String

  items CartItemsInGiftRequests[]
}

enum LanguageType {
    SPANISH
    CHINESE
    FRENCH
}

model LanguageRequest {
  request         ServiceRequest  @relation(fields: [requestID], references: [requestID], onDelete: Cascade)
  requestID       Int             @unique
  name            String
  language        LanguageType
}
